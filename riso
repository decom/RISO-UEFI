#!/bin/bash

#Variáveis do script

    DIR_RISO=/usr/riso

    DIR_IMG=$DIR_RISO/imagens

    IMG_WIN=$DIR_IMG/windows.img.bz2

    IMG_LIN=$DIR_IMG/linux.tar.bz2

    IMG_EFI=$DIR_IMG/efi.tar.bz2

    TOR_WIN=$IMG_WIN.torrent

    TOR_LIN=$IMG_LIN.torrent

    RISO_CFG=$DIR_RISO/riso-EFI.cfg
    
    VERSION=`cat $DIR_RISO/riso.version`
    
baixar_imagem_linux() {

    clear

    echo -e '\033[36m Conectando ao SERVIDOR RISO UEFI...\n\033[m'

    carregar_variaveis || return 1

    #Vefifica se imagem é a mais recente

    SIZELOCLIN="0"

    [ -e ${IMG_LIN} ] && SIZELOCLIN=$(du ${IMG_LIN} | cut -f1)

    if [ "$SIZELOCLIN" = "$TAMLINUX" ]; then

    dialog\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'A imagem do linux criada é a mais recente.'\
    0 0

    return 1

    fi

    #Deleta a imagem antiga

    echo -e '\033[36m Removendo a imagem antiga do linux...\n\033[m'

    rm -f ${IMG_LIN}

    rm -f ${TOR_LIN}

    echo -e '\033[36m A imagem antiga do linux foi removida com sucesso...\n\033[m'

    echo -e '\033[36m Baixando as imagens novas do "linux e EFI" do SERVIDOR RISO UEFI...\n\033[m'

    #Baixa a imagem do SERVIDOR e a EFI

    wget -O ${TOR_LIN} "http://${SERVIDOR}/linux.tar.bz2.torrent"

    wget -O ${IMG_EFI} "http://${SERVIDOR}/efi.tar.bz2"

    #Guarda o IP de criação do torrent

    echo $SERVIDOR > $DIR_IMG/linux.ip

    cd ${DIR_IMG}

    rtorrent ${TOR_LIN}

    #Volta para o menu ao fechar torrent

    trap "killall rtorrent; clear; exit" 2 15

    echo -e '\033[36m As imagens novas do "linux e EFI" foram baixadas com sucesso.\n\033[m'

    sleep 5

    reset

    return 0

}

baixar_imagem_windows() {

    clear

    echo -e '\033[36m Conectando ao SERVIDOR RISO UEFI...\n\033[m'

    carregar_variaveis || return 1

    #Vefifica se a imagem do windows é a mais recente

    SIZELOCWIN="0"

    [ -e ${IMG_WIN} ] && SIZELOCWIN=$(du ${IMG_WIN} | cut -f1)

    if [ "$SIZELOCWIN" = "$TAMWINDOWS" ]; then

    dialog\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'A imagem do windows criada é a mais recente.'\
    0 0

    return 1

    fi

    #Deleta a imagem antiga

    echo -e '\033[36m Removendo a imagem antiga do windows...\n\033[m'

    rm -f ${IMG_WIN}

    rm -f ${TOR_WIN}

    echo -e '\033[36m A imagem antiga do windows foi removida com sucesso.\n\033[m'

    echo -e '\033[36m Baixando as imagens novas do "windows e EFI" do SERVIDOR RISO UEFI...\n\033[m'

    #Baixa a imagem do SERVIDOR e a EFI

    wget -O ${TOR_WIN} "http://${SERVIDOR}/windows.img.bz2.torrent"

    wget -O ${IMG_EFI} "http://${SERVIDOR}/efi.tar.bz2"

    #Guarda o IP de criação do torrent

    echo $SERVIDOR > $DIR_IMG/windows.ip

    cd ${DIR_IMG}

    rtorrent ${TOR_WIN}

    #Volta para o menu ao fechar o torrent

    trap "killall rtorrent; clear; exit" 2 15

    echo -e '\033[36m As imagens novas do "windows e EFI" foram baixadas com sucesso.\n\033[m'

    sleep 5

    reset

    return 0

}

carregar_variaveis() {

    AVAHI_SAIDA=`avahi-browse -rtp _UEFI_RISO._tcp | grep '=' | head -n 1 | cut -d';' -f10`

    SERVIDOR=`( tr ' ' '\n' | grep "^\"SERVIDOR=" | cut -d'=' -f2 | cut -d'"' -f1) <<< $AVAHI_SAIDA`
        
    if [ -z $SERVIDOR ]; then

    dialog\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não existe um SERVIDOR RISO UEFI ativo na rede. Verifique a conexão e tente novamente.'\
    0 0

    exit 1

    fi

#Tamanho total das imagens criadas no SERVIDOR.

    TAMWINDOWS=`( tr ' ' '\n' | grep "^\"TAMWINDOWS=" | cut -d'=' -f2 | cut -d'"' -f1) <<< $AVAHI_SAIDA`

    TAMLINUX=`( tr ' ' '\n' | grep "^\"TAMLINUX=" | cut -d'=' -f2 | cut -d'"' -f1) <<< $AVAHI_SAIDA`

    wget -O ${RISO_CFG} "http://${SERVIDOR}/riso-EFI.cfg"

    source $RISO_CFG

    return 0

}

instalar_efi(){

    if [ -e ${IMG_EFI} ]; then

    cd /boot/efi

    tar --overwrite -jxvf $IMG_EFI

    cd ~

    return 0

    else

    dialog\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não foi possível obter a imagem EFI'\
    0 0

    return 1

    fi

}

instalar_linux() {

    clear

    if [ -e ${IMG_LIN} ]; then

    instalar_efi

    #Carrega as variáveis do disco rígido

    source $RISO_CFG

    #Desmonta a partição do linux.

    umount /dev/disk/by-uuid/${PARTLINUX,,} 2> /dev/null

    #Instala o linux

    mkfs.${SA_PARTLINUX} -qF -U ${PARTLINUX,,} /dev/disk/by-uuid/${PARTLINUX,,}

    mount /dev/disk/by-uuid/${PARTLINUX,,} /mnt

    cd /mnt

    tar --overwrite -jxvf $IMG_LIN

    cd ..

    umount /mnt 2> /dev/null

    sleep 5

    update-grub

    reboot

    else

    dialog\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não foi criada uma imagem do linux'\
    0 0

    return 1

    fi

}

instalar_linux_windows() {

    clear

    if [ -e ${IMG_WIN} -a -e ${IMG_LIN} ]; then

    instalar_efi

    #Carrega as variáveis do disco rígido

    source $RISO_CFG

    #Desmonta as partiçoes windows e linux.

    umount /dev/disk/by-uuid/${PARTWINDOWS^^} 2> /dev/null

    umount /dev/disk/by-uuid/${PARTLINUX,,} 2> /dev/null

    #Instala o windows.

    bzcat -c $IMG_WIN | ntfsclone --restore-image --overwrite /dev/disk/by-uuid/${PARTWINDOWS^^} -

    #Instala o linux.

    mkfs.${SA_PARTLINUX} -qF -U $PARTLINUX /dev/disk/by-uuid/${PARTLINUX,,}

    mount /dev/disk/by-uuid/${PARTLINUX,,} /mnt

    cd /mnt

    tar --overwrite -jxvf $IMG_LIN

    cd ..

    umount /mnt 2> /dev/null

    sleep 5

    update-grub

    reboot

    else

    dialog\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não existem imagens dos sistemas operacionais, é preciso criar as imagens.'\
    0 0

    return 1

    fi

}

instalar_windows() {

    clear

    if [ -e ${IMG_WIN} ]; then

    instalar_efi

    #Carrega as variáveis do disco rígido

    source $RISO_CFG

    #Desmonta a partição do windows

    umount /dev/disk/by-uuid/${PARTWINDOWS^^} 2> /dev/null

    #Instala o windows

    bzcat -c $IMG_WIN | ntfsclone --restore-image --overwrite /dev/disk/by-uuid/${PARTWINDOWS^^}  -

    sleep 5

    update-grub

    reboot

    else

    dialog\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não foi criada uma imagem do windows'\
    0 0

    return 1

    fi

}

menu() {

    while : ; do

    OPCAO=$(dialog --stdout\
    --ok-label 'Confirmar'\
    --cancel-label 'Sair'\
    --title "RISO UEFI ${VERSION}"\
    --menu 'Selecione uma opção:'\
    0 60 0\
    1 'Baixar e instalar novas imagens'\
    2 'Baixar novas imagens'\
    3 'Instalar as imagens baixadas')

    [ $? -ne 0 ] && break

    case $OPCAO in

    1) menu_baixar_instalar_imagens;;

    2) menu_baixar_imagens;;

    3) menu_instalar_imagens;;

    esac

    done

}

menu_baixar_imagens() {

    OPCAO=$(dialog --stdout\
    --ok-label 'Confirmar'\
    --checklist 'Selecione as imagens que serão baixadas:'\
    0 60 0\
    Linux '' ON\
    Windows '' ON)

    case $OPCAO in

    "Linux") baixar_imagem_linux && 
    dialog\
    --title 'Sucesso'\
    --ok-label 'OK'\
    --msgbox 'A imagem do linux foi baixada com sucesso.'\
    0 0;;

    "Windows") baixar_imagem_windows && 
    dialog\
    --title 'Sucesso'\
    --ok-label 'OK'\
    --msgbox 'A imagem do windows foi baixada com sucesso.'\
    0 0;;

    "Linux Windows") baixar_imagem_linux && baixar_imagem_windows && 
    dialog\
    --title 'Sucesso'\
    --ok-label 'OK'\
    --msgbox 'As imagens do windows e linux foram baixadas com sucesso.'\
    0 0;;

    esac

}

menu_baixar_instalar_imagens() {

    OPCAO=$(dialog --stdout\
    --ok-label 'Confirmar'\
    --checklist 'Selecione as imagens que serão baixadas e instaladas:'\
    0 60 0\
    Linux '' ON\
    Windows '' ON)

    case $OPCAO in

    "Linux") baixar_imagem_linux && instalar_linux;;
    
    "Windows") baixar_imagem_windows && instalar_windows;;

    "Linux Windows") baixar_imagem_linux && baixar_imagem_windows && instalar_linux_windows;;

    esac

}

menu_instalar_imagens() {

    OPCAO=$(dialog --stdout\
    --ok-label 'Confirmar'\
    --checklist 'Selecione as imagens que serão instaladas:'\
    0 60 0\
    Linux '' ON\
    Windows '' ON)

    case $OPCAO in

    "Linux") instalar_linux;;

    "Windows") instalar_windows;;

    "Linux Windows") instalar_linux_windows;;

    esac

}


#Verifica se o usuário é o root antes de executar o menu e caso o usuário não seja root termina a execução.

    if [ $(id -u) -ne "0" ];then

    echo -e '\033[36m Este script deve ser executado pelo usuário root. Execute o script novamente.\n\033[m'
    
    exit 1
    
    else

    menu    

    fi
