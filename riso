#!/bin/bash

#Variáveis do script

    DIR_RISO=/usr/riso

    DIR_IMG=${DIR_RISO}/imagens

    IMG_WIN=${DIR_IMG}/windows.img.bz2

    IMG_LIN=${DIR_IMG}/linux.tar.bz2

    IMG_EFI=${DIR_IMG}/efi.tar.bz2

    TOR_WIN=${IMG_WIN}.torrent

    TOR_LIN=${IMG_LIN}.torrent

    RISO_CFG=${DIR_RISO}/riso-EFI.cfg
    
    VERSION=`cat ${DIR_RISO}/riso-EFI.version`
    
baixar_imagem_linux() {

    clear

    dialog --sleep 5  --infobox " Conectando ao SERVIDOR RISO UEFI ${VERSION}." 10 50

    carregar_variaveis || return 1

    #Vefifica se imagem é a mais recente

    SIZELOCLIN="0"

    [ -e ${IMG_LIN} ] && SIZELOCLIN=$(du ${IMG_LIN} | cut -f1)

    if [ "${SIZELOCLIN}" = "${TAMLINUX}" ]; then

    dialog --clear\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'A imagem do linux criada é a mais recente.'\
    0 0

    return 1

    fi

    #Deleta a imagem antiga

    dialog --sleep 5  --infobox " Removendo a imagem antiga do linux." 10 50

    rm -f ${IMG_LIN}

    rm -f ${TOR_LIN}

    dialog --sleep 5  --infobox " A imagem antiga do linux foi removida com sucesso." 10 50

    dialog --sleep 5  --infobox " Baixando as imagens novas do linux e EFI do SERVIDOR RISO UEFI ${VERSION}." 10 50

    #Baixa a imagem do SERVIDOR e a EFI

    wget -O ${TOR_LIN} "http://${SERVIDOR}/linux.tar.bz2.torrent"

    wget -O ${IMG_EFI} "http://${SERVIDOR}/efi.tar.bz2"

    #Guarda o IP de criação do torrent

    echo ${SERVIDOR} > ${DIR_IMG}/linux.ip

    cd ${DIR_IMG}

    rtorrent ${TOR_LIN}

    #Volta para o menu ao fechar torrent

    trap "killall rtorrent; clear; exit" 2 15

    dialog --sleep 5  --infobox " As imagens novas do linux e EFI foram baixadas com sucesso." 10 50

    sleep 5

    reset

    return 0

}

baixar_imagem_windows() {

    clear

    dialog --sleep 5  --infobox " Conectando ao SERVIDOR RISO UEFI ${VERSION}." 10 50

    carregar_variaveis || return 1

    #Vefifica se a imagem do windows é a mais recente

    SIZELOCWIN="0"

    [ -e ${IMG_WIN} ] && SIZELOCWIN=$(du ${IMG_WIN} | cut -f1)

    if [ "${SIZELOCWIN}" = "${TAMWINDOWS}" ]; then

    dialog --clear\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'A imagem do windows criada é a mais recente.'\
    0 0

    return 1

    fi

    #Deleta a imagem antiga

    dialog --sleep 5  --infobox " Removendo a imagem antiga do windows." 10 50

    rm -f ${IMG_WIN}

    rm -f $TOR_WIN

    dialog --sleep 5  --infobox " A imagem antiga do windows foi removida com sucesso." 10 50

    dialog --sleep 5  --infobox " Baixando as imagens novas do windows e EFI do SERVIDOR RISO UEFI ${VERSION}." 10 50

    #Baixa a imagem do SERVIDOR e a EFI

    wget -O $TOR_WIN "http://${SERVIDOR}/windows.img.bz2.torrent"

    wget -O ${IMG_EFI} "http://${SERVIDOR}/efi.tar.bz2"

    #Guarda o IP de criação do torrent

    echo ${SERVIDOR} > ${DIR_IMG}/windows.ip

    cd ${DIR_IMG}

    rtorrent $TOR_WIN

    #Volta para o menu ao fechar o torrent

    trap "killall rtorrent; clear; exit" 2 15

    dialog --sleep 5  --infobox " As imagens novas do windows e EFI foram baixadas com sucesso." 10 50

    sleep 5

    reset

    return 0

}

carregar_variaveis() {

    dialog --sleep 5  --infobox " Carregando as variáveis do SERVIDOR RISO UEFI ${VERSION}." 10 50
    
    AVAHI_SAIDA=`avahi-browse -rtp _RISO_UEFI._tcp | grep '=' | head -n 1 | cut -d';' -f10`

    SERVIDOR=`( tr ' ' '\n' | grep "^\"SERVIDOR=" | cut -d'=' -f2 | cut -d'"' -f1) <<< ${AVAHI_SAIDA}`
        
    if [ -z ${SERVIDOR} ]; then

    dialog --clear\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não existe um SERVIDOR RISO UEFI ativo na rede. Verifique a conexão e tente novamente.'\
    0 0

    exit 1

    fi
    
#Tamanho total das imagens criadas no SERVIDOR.

    TAMWINDOWS=`( tr ' ' '\n' | grep "^\"TAMWINDOWS=" | cut -d'=' -f2 | cut -d'"' -f1) <<< ${AVAHI_SAIDA}`

    TAMLINUX=`( tr ' ' '\n' | grep "^\"TAMLINUX=" | cut -d'=' -f2 | cut -d'"' -f1) <<< ${AVAHI_SAIDA}`

    wget -O ${RISO_CFG} "http://${SERVIDOR}/riso-EFI.cfg"

    source ${RISO_CFG}

    dialog --sleep 5  --infobox " As variáveis do SERVIDOR RISO UEFI ${VERSION} foram carregadas com sucesso." 10 50
    
    return 0

}

instalar_efi(){

    if [ -e ${IMG_EFI} ]; then

    dialog --sleep 5  --infobox " Instalando a imagem EFI." 10 50
    
    cd /boot/efi

    tar --overwrite -jxvf ${IMG_EFI}

    cd ~

    dialog --sleep 5  --infobox " A imagem EFI foi instalada com sucesso." 10 50
    
    return 0

    else

    dialog --clear\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não foi possível obter a imagem EFI'\
    0 0

    return 1

    fi
    
    
}

instalar_linux() {

    clear
      
    if [ -e ${IMG_LIN} ]; then

    dialog --sleep 5  --infobox " Instalando o sistema operacional linux." 10 50
    
    instalar_efi

    #Carrega as variáveis do disco rígido

    source ${RISO_CFG}

    #Desmonta a partição do linux.

    umount /dev/disk/by-uuid/${PARTLINUX,,} 2> /dev/null

    #Instala o linux

    mkfs.${SA_PARTLINUX} -qF -U ${PARTLINUX,,} /dev/disk/by-uuid/${PARTLINUX,,}

    mount /dev/disk/by-uuid/${PARTLINUX,,} /mnt

    cd /mnt

    tar --overwrite -jxvf ${IMG_LIN}

    cd ..

    umount /mnt 2> /dev/null

    update-grub
    
    dialog --sleep 5  --infobox " O sistema operacional linux foi instalado com sucesso." 10 50

    reboot

    else

    dialog --clear\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não foi criada uma imagem do sistema operacional linux'\
    0 0

    return 1

    fi

}

instalar_linux_windows() {

    clear

    if [ -e ${IMG_WIN} -a -e ${IMG_LIN} ]; then

    instalar_efi
    
    dialog --sleep 5  --infobox " Instalando os sistemas operacionais linux e windows." 10 50

    #Carrega as variáveis do disco rígido

    source ${RISO_CFG}

    #Desmonta as partiçoes windows e linux.

    umount /dev/disk/by-uuid/${PARTWINDOWS^^} 2> /dev/null

    umount /dev/disk/by-uuid/${PARTLINUX,,} 2> /dev/null

    #Instala o windows.

    bzcat -c ${IMG_WIN} | ntfsclone --restore-image --overwrite /dev/disk/by-uuid/${PARTWINDOWS^^} -

    #Instala o linux.

    mkfs.${SA_PARTLINUX} -qF -U ${PARTLINUX} /dev/disk/by-uuid/${PARTLINUX,,}

    mount /dev/disk/by-uuid/${PARTLINUX,,} /mnt

    cd /mnt

    tar --overwrite -jxvf ${IMG_LIN}

    cd ..

    umount /mnt 2> /dev/null

    update-grub
    
    dialog --sleep 5  --infobox " Os sistemas operacionais linuz e windows foram instalados com sucesso." 10 50

    reboot

    else

    dialog --clear\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não foram criadas imagens dos sistemas operacionais, é preciso criar as imagens.'\
    0 0

    return 1

    fi

}

instalar_windows() {

    clear

    if [ -e ${IMG_WIN} ]; then

    instalar_efi
    
    dialog --sleep 5  --infobox " Instalando o sistema operacional windows." 10 50

    #Carrega as variáveis do disco rígido

    source ${RISO_CFG}

    #Desmonta a partição do windows

    umount /dev/disk/by-uuid/${PARTWINDOWS^^} 2> /dev/null

    #Instala o windows

    bzcat -c ${IMG_WIN} | ntfsclone --restore-image --overwrite /dev/disk/by-uuid/${PARTWINDOWS^^}  -

    update-grub
    
    dialog --sleep 5  --infobox " O sistema operacional windows foi instalado com sucesso." 10 50

    reboot

    else

    dialog --clear\
    --title 'Atenção'\
    --ok-label 'OK'\
    --msgbox 'Não foi criada uma imagem do sistema operacional windows'\
    0 0

    return 1

    fi

}

menu() {

    while : ; do

    OPCAO=$(dialog --stdout --clear\
    --ok-label 'Confirmar'\
    --cancel-label 'Sair'\
    --title "RISO UEFI ${VERSION}"\
    --menu 'Selecione uma opção:'\
    0 0 0\
    1 'Baixar e instalar novas imagens dos sistemas operacionais'\
    2 'Baixar novas imagens dos sistemas operacionais'\
    3 'Instalar as imagens dos sistemas operacionais baixadas')

    [ $? -ne 0 ] && break

    case ${OPCAO} in

    1) menu_baixar_instalar_imagens;;

    2) menu_baixar_imagens;;

    3) menu_instalar_imagens;;

    esac

    done

}

menu_baixar_imagens() {

    OPCAO=$(dialog --stdout --clear\
    --ok-label 'Confirmar'\
    --checklist 'Selecione as imagens dos sistemas operacionais que serão baixadas:'\
    0 0 0\
    Linux '' ON\
    Windows '' ON)

    case ${OPCAO} in

    "Linux") baixar_imagem_linux && 
    dialog --clear\
    --title 'Sucesso'\
    --ok-label 'OK'\
    --msgbox 'A imagem do sistema operacional linux foi baixada com sucesso.'\
    0 0;;

    "Windows") baixar_imagem_windows && 
    dialog --clear\
    --title 'Sucesso'\
    --ok-label 'OK'\
    --msgbox 'A imagem do sistema operacional windows foi baixada com sucesso.'\
    0 0;;

    "Linux Windows") baixar_imagem_linux && baixar_imagem_windows && 
    dialog --clear\
    --title 'Sucesso'\
    --ok-label 'OK'\
    --msgbox 'As imagens dos sistemas operacionais linux e windows foram baixadas com sucesso.'\
    0 0;;

    esac

}

menu_baixar_instalar_imagens() {

    OPCAO=$(dialog --stdout --clear\
    --ok-label 'Confirmar'\
    --checklist 'Selecione as imagens dos sistemas operacionais que serão baixadas e instaladas:'\
    0 0 0\
    Linux '' ON\
    Windows '' ON)

    case ${OPCAO} in

    "Linux") baixar_imagem_linux && instalar_linux;;
    
    "Windows") baixar_imagem_windows && instalar_windows;;

    "Linux Windows") baixar_imagem_linux && baixar_imagem_windows && instalar_linux_windows;;

    esac

}

menu_instalar_imagens() {

    OPCAO=$(dialog --stdout --clear\
    --ok-label 'Confirmar'\
    --checklist 'Selecione as imagens dos sistemas operacionais que serão instaladas:'\
    0 0 0\
    Linux '' ON\
    Windows '' ON)

    case ${OPCAO} in

    "Linux") instalar_linux;;

    "Windows") instalar_windows;;

    "Linux Windows") instalar_linux_windows;;

    esac

}


#Verifica se o usuário é o root antes de executar o menu e caso o usuário não seja o root termina a execução.

    if [ $(id -u) -ne "0" ];then

    dialog --sleep 5  --infobox " Este script deve ser executado pelo usuário root. Execute-o novamente." 10 50
    
    exit 1
    
    else

    menu    

    fi